// <auto-generated />
using EntityFrameworkCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EntityFrameworkCore.Migrations
{
    [DbContext(typeof(CarServiceContext))]
    [Migration("20180425073254_AddedRequiredAttributes")]
    partial class AddedRequiredAttributes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityFrameworkCore.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BodyNumber")
                        .IsRequired();

                    b.Property<string>("EngineNumber")
                        .IsRequired();

                    b.Property<int>("EngineVolume");

                    b.Property<string>("Mark")
                        .IsRequired();

                    b.Property<string>("OwnerName")
                        .IsRequired();

                    b.Property<int>("ReleaseYear");

                    b.Property<string>("StateNumber")
                        .IsRequired();

                    b.Property<string>("TechnicalPassport")
                        .IsRequired();

                    b.HasKey("CarId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("EntityFrameworkCore.Models.CarTechState", b =>
                {
                    b.Property<int>("CarTechStateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalEquipment");

                    b.Property<string>("BrakeSystem")
                        .IsRequired();

                    b.Property<int>("CarId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("InspectorId");

                    b.Property<string>("Lightning")
                        .IsRequired();

                    b.Property<bool>("MarkOnPassageOfServiceStation");

                    b.Property<double>("Mileage");

                    b.Property<string>("Suspension")
                        .IsRequired();

                    b.Property<string>("Wheels")
                        .IsRequired();

                    b.HasKey("CarTechStateId");

                    b.HasIndex("CarId");

                    b.HasIndex("InspectorId");

                    b.ToTable("CarTechStates");
                });

            modelBuilder.Entity("EntityFrameworkCore.Models.Inspector", b =>
                {
                    b.Property<int>("InspectorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("Subdivision")
                        .IsRequired();

                    b.HasKey("InspectorId");

                    b.ToTable("Inspectors");
                });

            modelBuilder.Entity("EntityFrameworkCore.Models.CarTechState", b =>
                {
                    b.HasOne("EntityFrameworkCore.Models.Car", "Car")
                        .WithMany("CarTechState")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EntityFrameworkCore.Models.Inspector", "Inspector")
                        .WithMany("CarTechStates")
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
